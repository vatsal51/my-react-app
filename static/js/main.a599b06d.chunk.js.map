{"version":3,"sources":["components/CheckBoxForm.js","components/ItemList.js","components/SearchForm.js","components/Airports.js","App.js","reportWebVitals.js","index.js"],"names":["CheckBoxForm","props","newList","items","RefreshedList","TempList","map","element","type","Selection","push","setArray","Set","x","JSON","stringify","parse","e","index","htmlFor","name","id","value","checked","onChange","ToggleItem","ItemList","className","post","icao","iata","elevation","latitude","longitude","SearchForm","people","useState","people2","setPeople2","useEffect","console","log","React","searchTerm","setSearchTerm","handleSearch","searchValue","FilterParam","filterdata","filter","entry","some","includes","placeholder","event","target","results","Airports","data","setItems","fetch","then","response","json","itemsName","UpdateItems","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a599b06d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nexport default function CheckBoxForm(props) {\r\n\r\n\tvar newList = props.items;\r\n\tvar RefreshedList = []; \r\n\tconst TempList = [];\r\n\tnewList.map(element => {\r\n\t\tRefreshedList = { \"type\": element.type, \"Selection\": element.Selection }\r\n\t\tTempList.push(RefreshedList);\r\n\t\tconst setArray = new Set(TempList.map(x => JSON.stringify(x)))\r\n\t\tnewList = [...setArray].map(x => JSON.parse(x))\r\n\t});\r\n\t// console.log(\"NewList --\", newList);\r\n\treturn (\r\n\r\n\t\t<ul>\r\n\t\t\tType\r\n\t\t\t{\r\n\t\t\t\tnewList.map((e, index) =>\r\n\t\t\t\t\t<li key={index}>\r\n\t\t\t\t\t\t<label htmlFor={e.type}>{e.type}\r\n\t\t\t\t\t\t\t<input type=\"checkbox\"\r\n\t\t\t\t\t\t\t\tname={e.type}\r\n\t\t\t\t\t\t\t\tid={e.type}\r\n\t\t\t\t\t\t\t\tvalue={e.Selection}\r\n\t\t\t\t\t\t\t\tchecked={e.Selection ? true : false}\r\n\t\t\t\t\t\t\t\tonChange={() => { props.ToggleItem(e.type) }}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t</ul>\r\n\t)\r\n}\r\n","import React from 'react'\r\n\r\nexport default function ItemList(props) {\r\n    // console.log(\"Final\", props.items);\r\n    function show(post) {\r\n\r\n        return <>\r\n            <span>  {post.name} </span>\r\n            <span>  {post.icao}  </span>\r\n            <span>  {post.iata}  </span>\r\n            <span>  {post.elevation} ft </span>\r\n            <span> N {post.latitude}  </span>\r\n            <span> W {post.longitude}  </span>\r\n            <span>  {post.type} </span>\r\n            {/* <span>  {post.Selection}</span> */}\r\n        </>\r\n    }\r\n    return (\r\n        <div className=\"itemData\">\r\n            {props.items.map((e) =>\r\n                <div key={e.id}>\r\n                    {e.Selection === true ? show(e) : false}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport ItemList from \"./ItemList\"\r\n\r\n\r\nexport default function SearchForm(props) {\r\n\tconst people = props.items\r\n\tconst [people2, setPeople2] = useState(people);\r\n\t// setPeople2(people);\r\n\tuseEffect(() => {\r\n\t\tsetPeople2(people);\r\n\t\tconsole.log(\"set ppl\", people2)\r\n\t}, [])\r\n\tconst [searchTerm, setSearchTerm] = React.useState(\"\");\r\n\tconst handleChange = event => {\r\n\t\tsetSearchTerm(event.target.value);\r\n\t\thandleSearch(event.target.value)\r\n\t};\r\n\r\n\r\n\r\n\tvar handleSearch = (searchValue) => {\r\n\t\t// Add More Param as per Response to get more filtering across serveral Coloumn\r\n\t\tlet FilterParam = [\"name\", \"city\", \"iata\"];\r\n\t\tconst filterdata = people.filter((entry) => {\r\n\t\t\treturn FilterParam.some(filter => entry[filter].includes(searchValue))\r\n\t\t})\r\n\t\tsetPeople2(filterdata); //Setting Filter Data\r\n\t\tconsole.log(\"Filtered Data\", people2);\r\n\t};\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<div className=\"Div\">\r\n\t\t\tFilter by search\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder=\"Search\"\r\n\t\t\t\tvalue={searchTerm}\r\n\t\t\t\tonChange={(handleChange)}\r\n\t\t\t/>\r\n\t\t\t<ItemList items={searchTerm == \"\" ? people : people2} results={people2}  />\r\n\r\n\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport CheckBoxForm from \"./CheckBoxForm\"\r\nimport ItemList from \"./ItemList\"\r\nimport SearchForm from \"./SearchForm\"\r\n\r\nfunction Airports(data) {\r\n\r\n    const [items, setItems] = useState([]);\r\n\r\n    const ToggleItem = (itemsName) => {\r\n        console.log('ToggleNew', itemsName);\r\n        const UpdateItems = items.map(ItemList =>\r\n            // ItemList.type === itemsName ? items : items\r\n            ItemList.type === itemsName ?\r\n                { ...ItemList, Selection: !ItemList.Selection ? true : false }\r\n                : ItemList\r\n        )\r\n        // console.log(\"dsadsa\", UpdateItems);\r\n        setItems(UpdateItems);\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        fetch(\"./airports.json\")\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                setItems(\r\n                    data.map(ItemList =>\r\n                        ItemList ? { ...ItemList, Selection: true } : ItemList\r\n                    )\r\n                );\r\n                // console.table(data)\r\n            });\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <CheckBoxForm items={items} ToggleItem={ToggleItem} />\r\n            <SearchForm items={items} />\r\n            {/* <ItemList items={items} /> */}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Airports\r\n\r\n\r\n\r\n\r\n","import './App.css';\nimport Airports from './components/Airports';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n\n\n\n\nfunction App() {\n\n  \n  return (\n    <div className=\"App\">\n     <Airports Airports={Airports}/>\n    </div>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}